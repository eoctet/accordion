name: âš¡ Performance Issue
description: Report performance problems or optimization opportunities
title: "[PERFORMANCE] "
labels: ["performance", "needs-investigation"]
assignees: []
body:
  - type: markdown
    attributes:
      value: |
        Thanks for reporting a performance issue! Please provide detailed information to help us understand and reproduce the problem.

  - type: checkboxes
    id: prerequisites
    attributes:
      label: Prerequisites
      description: Please confirm you have completed the following
      options:
        - label: I have searched existing performance issues
          required: true
        - label: I have profiled the application to identify bottlenecks
          required: false
        - label: I have tested with the latest version
          required: true

  - type: dropdown
    id: performance_type
    attributes:
      label: Performance Issue Type
      description: What type of performance issue are you experiencing?
      options:
        - Slow execution time
        - High memory usage
        - High CPU usage
        - Memory leaks
        - Slow startup time
        - Poor scalability
        - Resource contention
        - Other
    validations:
      required: true

  - type: dropdown
    id: component
    attributes:
      label: Affected Component
      description: Which component is experiencing performance issues?
      options:
        - Action execution
        - Plan building
        - Graph processing
        - Session management
        - API calls
        - Script execution
        - Email sending
        - File operations
        - Overall framework
        - Other
    validations:
      required: true

  - type: textarea
    id: description
    attributes:
      label: Performance Issue Description
      description: Describe the performance problem in detail
      placeholder: |
        When executing a plan with X actions, the performance is significantly slower than expected...
        Memory usage grows continuously during execution...
        CPU usage spikes to 100% when...
    validations:
      required: true

  - type: textarea
    id: reproduction
    attributes:
      label: Reproduction Steps
      description: Steps to reproduce the performance issue
      placeholder: |
        1. Create a plan with N actions of type X
        2. Execute the plan with Y concurrent sessions
        3. Monitor resource usage during execution
        4. Observe performance degradation after Z minutes
    validations:
      required: true

  - type: textarea
    id: code_sample
    attributes:
      label: Code Sample
      description: Minimal code that demonstrates the performance issue
      render: java
      placeholder: |
        AccordionPlan plan = AccordionPlan.create();
        for (int i = 0; i < 1000; i++) {
            plan.addAction("action-" + i, SlowAction.builder().build());
        }
        // Performance degrades significantly with large number of actions
    validations:
      required: false

  - type: textarea
    id: metrics
    attributes:
      label: Performance Metrics
      description: Specific performance measurements (timing, memory, CPU usage)
      placeholder: |
        Execution time: 30 seconds (expected: 5 seconds)
        Memory usage: 2GB (expected: 500MB)
        CPU usage: 95% (expected: 30%)
        Throughput: 10 actions/sec (expected: 100 actions/sec)
    validations:
      required: true

  - type: textarea
    id: environment
    attributes:
      label: Environment Details
      description: System specifications and environment information
      placeholder: |
        OS: Ubuntu 22.04
        Java Version: OpenJDK 17.0.7
        Available Memory: 8GB
        CPU: Intel i7-8700K (6 cores)
        Accordion Version: 1.0.0
        JVM Args: -Xmx4g -XX:+UseG1GC
    validations:
      required: true

  - type: textarea
    id: profiling_data
    attributes:
      label: Profiling Data
      description: Results from profiling tools (JProfiler, VisualVM, etc.)
      render: text
      placeholder: |
        Top CPU consumers:
        - Method A: 45% CPU time
        - Method B: 30% CPU time
        
        Memory allocation hotspots:
        - Class X: 500MB allocated
        - Class Y: 200MB allocated
    validations:
      required: false

  - type: dropdown
    id: severity
    attributes:
      label: Performance Impact
      description: How severely does this impact your use case?
      options:
        - Low - Minor performance degradation
        - Medium - Noticeable slowdown
        - High - Significantly impacts usability
        - Critical - Makes the system unusable
    validations:
      required: true

  - type: textarea
    id: expected_performance
    attributes:
      label: Expected Performance
      description: What performance characteristics do you expect?
      placeholder: |
        Expected execution time: < 5 seconds for 100 actions
        Expected memory usage: < 500MB for typical workloads
        Expected throughput: > 1000 actions/minute
    validations:
      required: true

  - type: textarea
    id: workarounds
    attributes:
      label: Current Workarounds
      description: Any workarounds you've implemented to mitigate the issue
      placeholder: |
        - Reduced batch size from 1000 to 100 actions
        - Increased JVM heap size to 8GB
        - Added manual garbage collection calls
    validations:
      required: false

  - type: textarea
    id: additional_context
    attributes:
      label: Additional Context
      description: Any other relevant information
      placeholder: |
        Performance comparison with similar tools...
        Specific use case requirements...
        Business impact of the performance issue...
    validations:
      required: false