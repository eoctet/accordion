name: Security Scan

on:
  # Trigger on push to main and develop branches
  push:
    branches: [ main, develop ]
  
  # Trigger on pull requests
  pull_request:
    branches: [ main, develop ]
  
  # Scheduled weekly security scan (every Sunday at 2 AM UTC)
  schedule:
    - cron: '0 2 * * 0'
  
  # Allow manual trigger
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write
  security-events: write

jobs:
  security-scan:
    name: OWASP Dependency Check
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
      
      - name: Install jq for JSON parsing
        run: |
          sudo apt-get update
          sudo apt-get install -y jq
      
      - name: Cache OWASP NVD database
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository/org/owasp/dependency-check-data
          key: ${{ runner.os }}-owasp-nvd-${{ hashFiles('pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-owasp-nvd-
      
      - name: Debug Maven environment
        run: |
          echo "Maven version:"
          mvn --version
          echo "Java version:"
          java -version
          echo "Project structure:"
          ls -la
          echo "POM.xml exists:"
          ls -la pom.xml
      
      - name: Compile project for dependency analysis
        run: |
          echo "Compiling project for dependency analysis..."
          mvn clean compile -B -q
        continue-on-error: false
      
      - name: Run OWASP Dependency Check
        id: dependency-check
        run: |
          echo "Running OWASP Dependency Check..."
          
          # Create target directory if it doesn't exist
          mkdir -p target
          
          # Run dependency check using the configured Maven plugin
          # The plugin is already configured in pom.xml with proper settings
          mvn dependency-check:check -B
          
          # Check if the command succeeded
          DEPENDENCY_CHECK_EXIT_CODE=$?
          echo "dependency_check_exit_code=$DEPENDENCY_CHECK_EXIT_CODE" >> $GITHUB_OUTPUT
          
          if [ $DEPENDENCY_CHECK_EXIT_CODE -eq 0 ]; then
            echo "✅ Dependency check completed successfully"
          else
            echo "⚠️ Dependency check completed with issues (exit code: $DEPENDENCY_CHECK_EXIT_CODE)"
          fi
        continue-on-error: true
      
      - name: Parse security scan results
        id: parse-results
        run: |
          echo "Checking for dependency check reports..."
          ls -la target/ || echo "Target directory not found"
          
          # Check for any of the possible report files
          if [ -f "target/dependency-check-report.json" ] || [ -f "target/dependency-check-report.xml" ] || [ -f "target/dependency-check-report.html" ]; then
            echo "Security scan completed - reports found"
            
            # Initialize default values
            TOTAL_VULNS=0
            HIGH_VULNS=0
            CRITICAL_VULNS=0
            MEDIUM_VULNS=0
            LOW_VULNS=0
            
            # Parse JSON report if available
            if [ -f "target/dependency-check-report.json" ]; then
              echo "Parsing JSON report..."
              
              # Check if jq is available
              if command -v jq &> /dev/null; then
                TOTAL_VULNS=$(jq '.dependencies | map(.vulnerabilities // []) | flatten | length' target/dependency-check-report.json 2>/dev/null || echo "0")
                HIGH_VULNS=$(jq '.dependencies | map(.vulnerabilities // []) | flatten | map(select(.severity == "HIGH")) | length' target/dependency-check-report.json 2>/dev/null || echo "0")
                CRITICAL_VULNS=$(jq '.dependencies | map(.vulnerabilities // []) | flatten | map(select(.severity == "CRITICAL")) | length' target/dependency-check-report.json 2>/dev/null || echo "0")
                MEDIUM_VULNS=$(jq '.dependencies | map(.vulnerabilities // []) | flatten | map(select(.severity == "MEDIUM")) | length' target/dependency-check-report.json 2>/dev/null || echo "0")
                LOW_VULNS=$(jq '.dependencies | map(.vulnerabilities // []) | flatten | map(select(.severity == "LOW")) | length' target/dependency-check-report.json 2>/dev/null || echo "0")
              else
                echo "jq not available, using basic parsing"
                # Basic parsing without jq - count vulnerabilities in JSON
                TOTAL_VULNS=$(grep -o '"severity"' target/dependency-check-report.json | wc -l || echo "0")
                HIGH_VULNS=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"HIGH"' target/dependency-check-report.json | wc -l || echo "0")
                CRITICAL_VULNS=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"CRITICAL"' target/dependency-check-report.json | wc -l || echo "0")
                MEDIUM_VULNS=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"MEDIUM"' target/dependency-check-report.json | wc -l || echo "0")
                LOW_VULNS=$(grep -o '"severity"[[:space:]]*:[[:space:]]*"LOW"' target/dependency-check-report.json | wc -l || echo "0")
              fi
            elif [ -f "target/dependency-check-report.xml" ]; then
              echo "Parsing XML report..."
              # Basic XML parsing for vulnerability counts
              TOTAL_VULNS=$(grep -c '<vulnerability' target/dependency-check-report.xml || echo "0")
              HIGH_VULNS=$(grep -c 'severity="HIGH"' target/dependency-check-report.xml || echo "0")
              CRITICAL_VULNS=$(grep -c 'severity="CRITICAL"' target/dependency-check-report.xml || echo "0")
              MEDIUM_VULNS=$(grep -c 'severity="MEDIUM"' target/dependency-check-report.xml || echo "0")
              LOW_VULNS=$(grep -c 'severity="LOW"' target/dependency-check-report.xml || echo "0")
            else
              echo "Using HTML report for basic analysis..."
              # Very basic HTML parsing
              TOTAL_VULNS=$(grep -c -i 'vulnerability' target/dependency-check-report.html || echo "0")
            fi
            
            echo "total_vulnerabilities=$TOTAL_VULNS" >> $GITHUB_OUTPUT
            echo "high_vulnerabilities=$HIGH_VULNS" >> $GITHUB_OUTPUT
            echo "critical_vulnerabilities=$CRITICAL_VULNS" >> $GITHUB_OUTPUT
            echo "medium_vulnerabilities=$MEDIUM_VULNS" >> $GITHUB_OUTPUT
            echo "low_vulnerabilities=$LOW_VULNS" >> $GITHUB_OUTPUT
            
            # Determine security status
            if [ "$CRITICAL_VULNS" -gt 0 ] || [ "$HIGH_VULNS" -gt 0 ]; then
              echo "security_status=failed" >> $GITHUB_OUTPUT
            elif [ "$MEDIUM_VULNS" -gt 0 ]; then
              echo "security_status=warning" >> $GITHUB_OUTPUT
            else
              echo "security_status=passed" >> $GITHUB_OUTPUT
            fi
            
            # Create summary
            echo "## Security Scan Results" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| Medium | $MEDIUM_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW_VULNS |" >> $GITHUB_STEP_SUMMARY
            echo "| **Total** | **$TOTAL_VULNS** |" >> $GITHUB_STEP_SUMMARY
            
            echo "Vulnerability analysis completed:"
            echo "  Critical: $CRITICAL_VULNS"
            echo "  High: $HIGH_VULNS"
            echo "  Medium: $MEDIUM_VULNS"
            echo "  Low: $LOW_VULNS"
            echo "  Total: $TOTAL_VULNS"
            
          else
            echo "❌ Security scan reports not found"
            echo "Available files in target directory:"
            ls -la target/ || echo "Target directory does not exist"
            echo "security_status=error" >> $GITHUB_OUTPUT
            echo "total_vulnerabilities=0" >> $GITHUB_OUTPUT
            echo "high_vulnerabilities=0" >> $GITHUB_OUTPUT
            echo "critical_vulnerabilities=0" >> $GITHUB_OUTPUT
            echo "medium_vulnerabilities=0" >> $GITHUB_OUTPUT
            echo "low_vulnerabilities=0" >> $GITHUB_OUTPUT
          fi
      
      - name: Upload security scan reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-reports
          path: |
            target/dependency-check-report.*
            target/site/dependency-check-report.*
          retention-days: 30
          if-no-files-found: warn
      
      - name: Comment on PR with security results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const totalVulns = '${{ steps.parse-results.outputs.total_vulnerabilities }}';
            const criticalVulns = '${{ steps.parse-results.outputs.critical_vulnerabilities }}';
            const highVulns = '${{ steps.parse-results.outputs.high_vulnerabilities }}';
            const mediumVulns = '${{ steps.parse-results.outputs.medium_vulnerabilities }}';
            const securityStatus = '${{ steps.parse-results.outputs.security_status }}';
            
            let statusIcon = '';
            let statusMessage = '';
            
            if (securityStatus === 'passed') {
              statusIcon = '✅';
              statusMessage = 'No security vulnerabilities found';
            } else if (securityStatus === 'warning') {
              statusIcon = '⚠️';
              statusMessage = 'Medium severity vulnerabilities detected';
            } else if (securityStatus === 'failed') {
              statusIcon = '❌';
              statusMessage = 'High or critical vulnerabilities detected';
            } else {
              statusIcon = '❌';
              statusMessage = 'Security scan failed';
            }
            
            const comment = `## ${statusIcon} Security Scan Results
            
            ${statusMessage}
            
            | Severity | Count |
            |----------|-------|
            | Critical | ${criticalVulns} |
            | High | ${highVulns} |
            | Medium | ${mediumVulns} |
            | **Total** | **${totalVulns}** |
            
            ${securityStatus === 'failed' ? '⚠️ **This PR cannot be merged due to high or critical security vulnerabilities.**' : ''}
            ${securityStatus === 'warning' ? '⚠️ **Please review medium severity vulnerabilities before merging.**' : ''}
            
            📊 [View detailed security report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
      
      - name: Create security issue on failure
        if: steps.parse-results.outputs.security_status == 'failed' && (github.event_name == 'push' || github.event_name == 'schedule')
        uses: actions/github-script@v7
        with:
          script: |
            const criticalVulns = '${{ steps.parse-results.outputs.critical_vulnerabilities }}';
            const highVulns = '${{ steps.parse-results.outputs.high_vulnerabilities }}';
            
            const title = `🔒 Security Vulnerabilities Detected - ${criticalVulns} Critical, ${highVulns} High`;
            const body = `## Security Scan Alert
            
            **Scan Date**: ${new Date().toISOString()}
            **Commit**: ${context.sha}
            **Branch**: ${context.ref.replace('refs/heads/', '')}
            
            ### Vulnerability Summary
            
            | Severity | Count |
            |----------|-------|
            | Critical | ${criticalVulns} |
            | High | ${highVulns} |
            | **Total High/Critical** | **${parseInt(criticalVulns) + parseInt(highVulns)}** |
            
            ### Action Required
            
            ${criticalVulns > 0 ? '🚨 **Critical vulnerabilities require immediate attention**' : ''}
            ${highVulns > 0 ? '⚠️ **High severity vulnerabilities should be addressed promptly**' : ''}
            
            ### Next Steps
            
            1. Review the [detailed security report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Update vulnerable dependencies to secure versions
            3. If vulnerabilities are false positives, add them to \`owasp-suppressions.xml\`
            4. Re-run the security scan to verify fixes
            
            ---
            
            This issue was automatically created by the Security Scan workflow.
            `;
            
            // Check for existing security issues
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['security', 'vulnerability'],
              state: 'open'
            });
            
            if (existingIssues.data.length === 0) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['security', 'vulnerability', 'high-priority']
              });
            } else {
              // Update existing issue
              const existingIssue = existingIssues.data[0];
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                title: title,
                body: body
              });
            }
      
      - name: Close security issues on success
        if: steps.parse-results.outputs.security_status == 'passed' && (github.event_name == 'push' || github.event_name == 'schedule')
        uses: actions/github-script@v7
        with:
          script: |
            const openSecurityIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'security,vulnerability',
              state: 'open'
            });
            
            for (const issue of openSecurityIssues.data) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                state: 'closed'
              });
              
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: `✅ **Security vulnerabilities resolved**\n\nAll high and critical vulnerabilities have been addressed. This issue is now closed.\n\n[View latest scan results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
              });
            }
      
      - name: Set workflow status
        if: always()
        run: |
          SECURITY_STATUS="${{ steps.parse-results.outputs.security_status }}"
          DEPENDENCY_CHECK_EXIT_CODE="${{ steps.dependency-check.outputs.dependency_check_exit_code }}"
          
          echo "Security Status: $SECURITY_STATUS"
          echo "Dependency Check Exit Code: $DEPENDENCY_CHECK_EXIT_CODE"
          
          if [ "$SECURITY_STATUS" = "failed" ]; then
            echo "❌ Security scan failed - high or critical vulnerabilities found"
            exit 1
          elif [ "$SECURITY_STATUS" = "warning" ]; then
            echo "⚠️ Security scan completed with warnings - medium vulnerabilities found"
            exit 0
          elif [ "$SECURITY_STATUS" = "passed" ]; then
            echo "✅ Security scan passed - no vulnerabilities found"
            exit 0
          elif [ "$SECURITY_STATUS" = "error" ]; then
            echo "⚠️ Security scan encountered an error but continuing"
            echo "This might be due to network issues or database update problems"
            # Don't fail the workflow for infrastructure issues
            exit 0
          else
            echo "❌ Security scan status unknown"
            exit 1
          fi