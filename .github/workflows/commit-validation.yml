name: Commit Message Validation

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main, develop]

permissions:
  contents: read
  statuses: write
  pull-requests: write

jobs:
  validate-commits:
    runs-on: ubuntu-latest
    name: Validate Commit Messages
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Validate commit messages
        id: validate
        run: |
          # Get commits to validate
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            COMMITS=$(git rev-list --reverse origin/${{ github.event.pull_request.base.ref }}..HEAD)
          else
            COMMITS="${{ github.sha }}"
          fi
          
          INVALID_COMMITS=()
          VALID_COUNT=0
          
          for commit in $COMMITS; do
            COMMIT_MSG=$(git log --format=%s -n 1 $commit)
            
            # Check conventional commit format: type(scope): description
            if [[ "$COMMIT_MSG" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+ ]]; then
              echo "✅ Valid: $COMMIT_MSG"
              VALID_COUNT=$((VALID_COUNT + 1))
            else
              echo "❌ Invalid: $COMMIT_MSG"
              INVALID_COMMITS+=("$commit: $COMMIT_MSG")
            fi
          done
          
          echo "validated-commits=$VALID_COUNT" >> $GITHUB_OUTPUT
          
          if [[ ${#INVALID_COMMITS[@]} -eq 0 ]]; then
            echo "validation-result=success" >> $GITHUB_OUTPUT
            echo "All $VALID_COUNT commit(s) follow conventional format"
          else
            echo "validation-result=failure" >> $GITHUB_OUTPUT
            echo "error-message<<EOF" >> $GITHUB_OUTPUT
            printf '%s\n' "${INVALID_COMMITS[@]}" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi
          
      - name: Validate PR title
        if: github.event_name == 'pull_request'
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          
          if [[ ! "$PR_TITLE" =~ ^(feat|fix|docs|style|refactor|perf|test|chore|ci)(\(.+\))?: .+ ]]; then
            echo "❌ PR title must follow conventional commit format"
            echo "Current title: $PR_TITLE"
            echo "Expected format: type(scope): description"
            echo "Examples:"
            echo "  feat(api): add new endpoint"
            echo "  fix(core): resolve null pointer exception"
            exit 1
          fi
          
          echo "✅ PR title format is valid"
          
      - name: Update commit status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const status = '${{ steps.validate.outcome }}' === 'success' ? 'success' : 'failure';
            const description = status === 'success' 
              ? `All ${{ steps.validate.outputs.validated-commits }} commit(s) follow conventional format`
              : 'Commit message validation failed';
            
            let sha;
            if (context.eventName === 'pull_request') {
              sha = context.payload.pull_request.head.sha;
            } else {
              sha = context.sha;
            }
            
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: sha,
              state: status,
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: description,
              context: 'commit-message-validation'
            });
            
      - name: Comment on PR with validation results
        if: github.event_name == 'pull_request' && failure()
        uses: actions/github-script@v7
        with:
          script: |
            const errorMessage = `${{ steps.validate.outputs.error-message }}`;
            
            const comment = `## ❌ Commit Message Validation Failed

The following commit messages do not follow the [conventional commit format](https://www.conventionalcommits.org/):

\`\`\`
${errorMessage}
\`\`\`

### Expected Format
\`<type>(<scope>): <subject>\`

**Valid types**: feat, fix, docs, style, refactor, perf, test, chore, ci

**Examples**:
- \`feat(auth): add user authentication\`
- \`fix: resolve null pointer exception\`
- \`docs: update API documentation\`

Please update your commit messages and force push to fix this issue.`;
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });